{"version":3,"sources":["plumbing/Magic.ts","view/todo/core.ts","view/todo/Row.tsx","view/todo/Todo.tsx","plumbing/Bucket.ts","plumbing/View.ts","index.tsx","view/todo/Controller.ts"],"names":["observer","_random","max","Math","round","random","id","adjectives","colours","nouns","getTodo","label","isSelected","generateTodos","count","todos","i","push","length","setTodos","state","n","addTodos","concat","clear","setSelected","map","todo","deleteTodo","filter","updateEveryTenth","swapRows","a","magic","className","data-id","onClick","aria-hidden","todoMaker","store","create1000","swap","core","create10000","add1000","e","parseInt","currentTarget","dataset","type","Bucket","initialState","makeAutoObservable","this","deep","runInAction","newValue","swapFunction","args","newState","apply","reset","listener","autorun","viewMaker","container","Component","mount","document","getElementById","ReactDOM","render","React","createElement","unmount","unmountComponentAtNode","configure","useProxies","enforceActions","reactionRequiresObservable","observableRequiresReaction","Todo","view","todoControllerMaker"],"mappings":"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","file":"static/js/main.886bc076.chunk.js","sourcesContent":["import {observer} from 'mobx-react-lite'\n\nexport default observer;\n","\nfunction _random(max: number) {\n    return Math.round(Math.random() * 1000) % max;\n}\n\nlet id = 0;\n\nexport const resetId = () => {\n    id = 0;\n}\n\nconst adjectives = [\"pretty\", \"large\", \"big\", \"small\", \"tall\", \"short\", \"long\", \"handsome\", \"plain\", \"quaint\", \"clean\", \"elegant\", \"easy\", \"angry\", \"crazy\", \"helpful\", \"mushy\", \"odd\", \"unsightly\", \"adorable\", \"important\", \"inexpensive\", \"cheap\", \"expensive\", \"fancy\"];\nconst colours = [\"red\", \"yellow\", \"blue\", \"green\", \"pink\", \"brown\", \"purple\", \"brown\", \"white\", \"black\", \"orange\"];\nconst nouns = [\"table\", \"chair\", \"house\", \"bbq\", \"desk\", \"car\", \"pony\", \"cookie\", \"sandwich\", \"burger\", \"pizza\", \"mouse\", \"keyboard\"];\n\nexport type Todo = {\n    id: number,\n    label: string,\n    isSelected: boolean,\n}\n\nexport type State = {\n    todos: Array<Todo>;\n}\n\nexport const getInitialState = (): State => {\n    return {\n        todos: [],\n    };\n}\n\nconst getTodo = (label: string): Todo => {\n    return {\n        label,\n        id: ++id,\n        isSelected: false,\n    };\n}\n\nexport const generateTodos = (count: number = 1000): Array<Todo> => {\n    const todos = [];\n    for (let i = 0; i < count; i++) {\n        todos.push(getTodo(adjectives[_random(adjectives.length)] + \" \" + colours[_random(colours.length)] + \" \" + nouns[_random(nouns.length)]));\n    }\n    return todos;\n}\n\nexport const setTodos = (state: State, n: number): State => {\n    state.todos = generateTodos(n);\n    return state;\n}\n\nexport const addTodos = (state: State, n: number): State => {\n    state.todos = state.todos.concat(generateTodos(n));\n    return state;\n} \n\nexport const clear = (state: State): State => {\n    state.todos = [];\n    return state;\n}\n\nexport const setSelected = (state: State, id: number): State => {\n    state.todos = state.todos.map((todo: Todo) => {\n        todo.isSelected = todo.id === id;\n        return todo;\n    })\n    return state;\n}\n\nexport const deleteTodo = (state: State, id: number): State => {\n    state.todos = state.todos.filter((todo: Todo) => todo.id !== id);\n    return state;\n}\n\nexport const updateEveryTenth = (state: State): State => {\n    for(let i=0; i < state.todos.length; i+=10) {\n        state.todos[i].label = state.todos[i].label + ' !!!';\n    }\n    return state;\n}\n\nexport const swapRows = (state: State): State => {\n    if(state.todos.length > 998) {\n        const a = state.todos[1];\n        state.todos[1] = state.todos[998];\n        state.todos[998] = a;\n    }\n\n    return state;\n}","import magic from '../../plumbing/Magic';\nimport React, { MouseEvent } from 'react';\nimport * as core from './core';\n\ntype Props = {\n    todo: core.Todo,\n    setSelected: (e: MouseEvent<HTMLAnchorElement>) => void,\n    deleteTodo: (e: MouseEvent<HTMLAnchorElement>) => void,\n}\n\nconst Row = ({ todo, setSelected, deleteTodo }: Props) => {\n    return (\n        <tr className={todo.isSelected ? 'danger' : ''}>\n            <td className=\"col-md-1\">{todo.id}</td>\n            <td className=\"col-md-4\">\n                <a data-id={todo.id} onClick={setSelected}>{todo.label}</a>\n            </td>\n            <td className=\"col-md-1\"><a data-id={todo.id} onClick={deleteTodo}><span className=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span></a></td>\n            <td className=\"col-md-6\"></td>\n        </tr>\n    );\n}\n\nexport default magic(Row);","import React, {MouseEvent} from 'react';\nimport Bucket from '../../plumbing/Bucket';\nimport magic from '../../plumbing/Magic';\nimport * as core from './core';\nimport Row from './Row';\n\nconst todoMaker = (store: Bucket<core.State>) => {\n    const create1000 = () => {\n        store.swap(core.setTodos, 1000);\n    }\n    \n    const create10000 = () => {\n        store.swap(core.setTodos, 10000);\n    }\n    \n    const add1000 = () => {\n        store.swap(core.addTodos, 1000);\n    }\n    \n    const clear = () => {\n        store.swap(core.clear);\n    }\n    \n    const setSelected = (e: MouseEvent<HTMLAnchorElement>) => {\n        store.swap(core.setSelected, parseInt(e.currentTarget.dataset.id || ''));\n    }\n    \n    const deleteTodo = (e: MouseEvent<HTMLAnchorElement>) => {\n        store.swap(core.deleteTodo, parseInt(e.currentTarget.dataset.id || ''));\n    }\n\n    const updateEveryTenth = () => {\n        store.swap(core.updateEveryTenth);\n    }\n\n    const swapRows = () => {\n        store.swap(core.swapRows);\n    }\n\n    const Todo = () => {\n        return (\n            <div className=\"container\">\n                <div className=\"jumbotron\">\n                    <div className=\"row\">\n                        <div className=\"col-md-6\">\n                            <h1>Bucket</h1>\n                        </div>\n                        <div className=\"col-md-6\">\n                            <div className=\"row\">\n                                <div className=\"col-sm-6 smallpad\">\n                                    <button type=\"button\" className=\"btn btn-primary btn-block\" id=\"run\" onClick={create1000}>Create 1,000 rows</button>\n                                </div>\n                                <div className=\"col-sm-6 smallpad\">\n                                    <button type=\"button\" className=\"btn btn-primary btn-block\" id=\"runlots\" onClick={create10000}>Create 10,000 rows</button>\n                                </div>\n                                <div className=\"col-sm-6 smallpad\">\n                                    <button type=\"button\" className=\"btn btn-primary btn-block\" id=\"add\" onClick={add1000}>Append 1,000 rows</button>\n                                </div>\n                                <div className=\"col-sm-6 smallpad\">\n                                    <button type=\"button\" className=\"btn btn-primary btn-block\" id=\"update\" onClick={updateEveryTenth}>Update every 10th row</button>\n                                </div>\n                                <div className=\"col-sm-6 smallpad\">\n                                    <button type=\"button\" className=\"btn btn-primary btn-block\" id=\"clear\" onClick={clear}>Clear</button>\n                                </div>\n                                <div className=\"col-sm-6 smallpad\">\n                                    <button type=\"button\" className=\"btn btn-primary btn-block\" id=\"swaprows\" onClick={swapRows}>Swap Rows</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <table className=\"table table-hover table-striped test-data\">\n                    <tbody>\n                        {store.state.todos.map((todo) =>\n                         <Row \n                            key={todo.id}\n                            todo={todo}\n                            setSelected={setSelected}\n                            deleteTodo={deleteTodo}/>)}\n                    </tbody>\n                </table>\n                <span className=\"preloadicon glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\n            </div>\n        );\n    }\n\n    return magic(Todo);\n}\n\nexport default todoMaker;","import { makeAutoObservable, autorun, runInAction} from 'mobx';\n\ninterface SwapFunction<G> {\n    (state: G, ...rest: any[]): G\n}\n\nexport default class Bucket<T> {\n    state!: T;\n\n    constructor(initialState: T) {\n        makeAutoObservable(this, {}, {deep: true});\n        runInAction(() => {\n            this.state = initialState;\n        });\n    }\n\n    reset(newValue: T): T {\n        this.state = newValue;\n        return this.state;\n    }\n\n    swap(swapFunction: SwapFunction<T>, ...args: any[]): T {\n        const newState = swapFunction.apply(null, [this.state, ...args]);\n        return this.reset(newState);\n    }\n\n    deref(): T {\n        return this.state;\n    }\n\n    onChange(listener: (state: T) => void) {\n        autorun(() => listener(this.state));\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst viewMaker = ({ Component }: { Component: any }) => {\n    let container: HTMLElement | null;\n    return {\n        mount: (id: string) => {\n            container = document.getElementById(id);\n            ReactDOM.render(React.createElement(Component), container);\n        },\n        unmount: () => {\n            if (!container) {\n                return;\n            }\n            ReactDOM.unmountComponentAtNode(container);\n        },\n    }\n}\n\nexport default viewMaker","import { configure } from \"mobx\"\nimport todoControllerMaker from './view/todo/Controller';\n\nconfigure({\n    useProxies: \"never\",\n    enforceActions: 'always',\n    reactionRequiresObservable: true,\n    observableRequiresReaction: true,\n})\n\n\n\nconst todoController = todoControllerMaker({id: 'root'});\ntodoController.render();\n","import todoMaker from './Todo';\nimport Bucket from '../../plumbing/Bucket';\nimport viewMaker from '../../plumbing/View';\nimport * as core from './core';\n\ntype Controller = {\n    render: () => void;\n}\n\n\nexport default ({ id }: { id: string }): Controller => {\n    const store = new Bucket<core.State>(core.getInitialState());\n\n    const Todo = todoMaker(store);\n\n    const view = viewMaker({\n        Component: Todo,\n    });\n\n    return {\n        render: () => {\n            view.mount(id);\n        }\n    };\n};\n"],"sourceRoot":""}